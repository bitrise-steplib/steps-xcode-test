format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  test_swift_package:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/swift-package-deckofplayingcards
    - TEST_APP_BRANCH: main
    - BITRISE_PROJECT_PATH: Package.swift
    - BITRISE_SCHEME: DeckOfPlayingCards
    - TEST_PLAN: ""
    - DESTINATION: platform=iOS Simulator,name=Bitrise iOS default,OS=latest
    - LOG_FORMATTER: xcbeautify
    - EXPECT_TEST_FAILURE: "false"
    after_run:
    - _run
    - _check_outputs

  test_objc_xcpretty:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc-with-uitest.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - TEST_PLAN: ""
    - DESTINATION: platform=iOS Simulator,name=Bitrise iOS default,OS=latest
    - LOG_FORMATTER: xcpretty
    - EXPECT_TEST_FAILURE: "false"
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts
    - _check_xcpretty_html_report

  # Requires Xcode 11+
  test_test_plan:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-swift-project-with-parallel-ui-test.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: BullsEye.xcworkspace
    - BITRISE_SCHEME: BullsEye
    - TEST_PLAN: UnitTests
    - DESTINATION: platform=iOS Simulator,name=iPhone 12,OS=latest
    - LOG_FORMATTER: xcbeautify
    - EXPECT_TEST_FAILURE: "false"
    after_run:
    - _run
    - _check_outputs

  test_xcconfig_rel_path:
    envs:
    - TEST_APP_URL: https://github.com/bitrise-io/sample-apps-ios-simple-objc-with-uitest.git
    - TEST_APP_BRANCH: master
    - BITRISE_PROJECT_PATH: ios-simple-objc/ios-simple-objc.xcodeproj
    - BITRISE_SCHEME: ios-simple-objc
    - TEST_PLAN: ""
    - DESTINATION: platform=iOS Simulator,name=Bitrise iOS default,OS=latest
    - LOG_FORMATTER: xcodebuild
    - EXPECT_TEST_FAILURE: "false"
    - XCCONFIG_CONTENT: ./_tmp2/p.xcconfig
    before_run:
    - utility_create_xcconfig
    after_run:
    - _run
    - _check_outputs
    - _check_exported_artifacts

  utility_create_xcconfig:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -eox pipefail

            mkdir -p ./_tmp2
            echo "A=a" > ./_tmp2/p.xcconfig

  _run:
    before_run:
    - _clear_outputs
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            rm -rf ./_tmp
    - git::https://github.com/bitrise-steplib/bitrise-step-simple-git-clone.git:
        inputs:
        - repository_url: $TEST_APP_URL
        - clone_into_dir: ./_tmp
        - branch: $TEST_APP_BRANCH
    - certificate-and-profile-installer: { }
    - script:
        title: Set 'collect_simulator_diagnostics' input
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            COLLECT_SIM_DIAGNOSTICS_DEFAULT="on_failure"
            if [[ "$EXPECT_TEST_FAILURE" == "true" ]]; then
              COLLECT_SIM_DIAGNOSTICS_DEFAULT="never"
            fi
            envman add --key COLLECT_SIM_DIAGNOSTICS --value ${COLLECT_SIM_DIAGNOSTICS-$COLLECT_SIM_DIAGNOSTICS_DEFAULT}
    - script:
        title: Set TEST_REPETITION_MODE to 'retry_on_failure' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key TEST_REPETITION_MODE --value ${TEST_REPETITION_MODE-retry_on_failure}
    - script:
        title: Set MAXIMUM_TEST_REPETITIONS to '3' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key MAXIMUM_TEST_REPETITIONS --value ${MAXIMUM_TEST_REPETITIONS-3}
    - script:
        title: Set RELAUNCH_TESTS_FOR_EACH_REPETITION to 'no' if not set
        inputs:
        - content: |-
            #!/bin/env bash
            set -eo pipefail
            envman add --key RELAUNCH_TESTS_FOR_EACH_REPETITION --value ${RELAUNCH_TESTS_FOR_EACH_REPETITION-no}
    - path::./:
        inputs:
        - project_path: ./_tmp/$BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - test_plan: $TEST_PLAN
        - test_repetition_mode: $TEST_REPETITION_MODE
        - maximum_test_repetitions: $MAXIMUM_TEST_REPETITIONS
        - relaunch_tests_for_each_repetition: $RELAUNCH_TESTS_FOR_EACH_REPETITION
        - xcconfig_content: $XCCONFIG_CONTENT
        - destination: $DESTINATION
        - log_formatter: $LOG_FORMATTER
        - perform_clean_action: "yes"
        - xcodebuild_options: -verbose
        - verbose_log: "yes"
        - collect_simulator_diagnostics: $COLLECT_SIM_DIAGNOSTICS

  _clear_outputs:
    steps:
    - script:
        title: Clear step outputs
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            envman add --key BITRISE_XCODE_TEST_RESULT --value ""
            envman add --key BITRISE_XCRESULT_PATH --value ""
            envman add --key BITRISE_XCODE_TEST_ATTACHMENTS_PATH --value ""
            envman add --key BITRISE_XCODEBUILD_BUILD_LOG_PATH --value ""
            envman add --key BITRISE_XCODEBUILD_TEST_LOG_PATH --value ""

  _check_outputs:
    steps:
    - script:
        title: Check BITRISE_XCODE_TEST_RESULT
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash

            echo "BITRISE_XCODE_TEST_RESULT: $BITRISE_XCODE_TEST_RESULT"
            if [[ $EXPECT_TEST_FAILURE == "true" ]] ; then
              if [[ "$BITRISE_XCODE_TEST_RESULT" != "failed" ]] ; then
                echo "Invalid BITRISE_XCODE_TEST_RESULT value ($BITRISE_XCODE_TEST_RESULT), should be: failed"
                exit 1
              fi
            else
              if [[ "$BITRISE_XCODE_TEST_RESULT" != "succeeded" ]] ; then
                echo "Invalid BITRISE_XCODE_TEST_RESULT value ($BITRISE_XCODE_TEST_RESULT), should be: succeeded"
                exit 1
              fi
            fi
    - git::https://github.com/bitrise-steplib/bitrise-step-check-step-outputs.git@main:
        is_always_run: true
        inputs:
        - envs:
        - files:
        - dirs: |-
            BITRISE_XCRESULT_PATH
        - deploy_dir: $BITRISE_DEPLOY_DIR
        - deployed_files: |-
            BITRISE_XCODEBUILD_TEST_LOG_PATH
            BITRISE_XCRESULT_ZIP_PATH
        - deployed_dirs:
    - script:
        title: Check testing addon support
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash

            # Check and REMOVE test-info.json
            if [ $(find ${BITRISE_TEST_DEPLOY_DIR} -type f -delete -print -regex "${BITRISE_TEST_DEPLOY_DIR}/.*/${BITRISE_SCHEME}/test-info\.json" | grep -q .) ]; then
              echo "${BITRISE_TEST_DEPLOY_DIR} does not contain test-info.json."
              exit 1
            fi

  _check_exported_artifacts:
    steps:
    - script:
        title: Exported attachment test
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -e
            version=`xcodebuild -version`
            regex="Xcode ([0-9]*)."
            if [[ $version =~ $regex ]]; then
              if [[ ${BASH_REMATCH[1]} -ge 11 ]]; then
                exit 0
              fi
            fi

            if [ ! -f $BITRISE_DEPLOY_DIR/ios-simple-objc-xc-test-Attachments.zip ]; then
                echo "Exported artifacts - ios-simple-objc-xc-test-Attachments.zip - not found in $BITRISE_DEPLOY_DIR"
                exit 1
            fi

            echo "Exported attachments found: $BITRISE_DEPLOY_DIR/ios-simple-objc-xc-test-Attachments.zip"

  _check_xcpretty_html_report:
    steps:
    - script:
        title: Check xcpretty html report
        is_always_run: true
        inputs:
        - content: |-
            #!/bin/env bash
            set -e

            if [ ! -f $BITRISE_DEPLOY_DIR/xcode-test-results-ios-simple-objc.html ]; then
                echo "Exported xcpretty html report - xcode-test-results-ios-simple-objc.html - not found in $BITRISE_DEPLOY_DIR"
                exit 1
            fi

            echo "Exported xcpretty html report found: $BITRISE_DEPLOY_DIR/xcode-test-results-ios-simple-objc.html"
