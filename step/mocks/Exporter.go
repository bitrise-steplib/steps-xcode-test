// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Exporter is an autogenerated mock type for the Exporter type
type Exporter struct {
	mock.Mock
}

// ExportFlakyTestCases provides a mock function with given fields: xcResultPath, useOldXCResultExtractionMethod
func (_m *Exporter) ExportFlakyTestCases(xcResultPath string, useOldXCResultExtractionMethod bool) error {
	ret := _m.Called(xcResultPath, useOldXCResultExtractionMethod)

	if len(ret) == 0 {
		panic("no return value specified for ExportFlakyTestCases")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool) error); ok {
		r0 = rf(xcResultPath, useOldXCResultExtractionMethod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportSimulatorDiagnostics provides a mock function with given fields: deployDir, pth, name
func (_m *Exporter) ExportSimulatorDiagnostics(deployDir string, pth string, name string) error {
	ret := _m.Called(deployDir, pth, name)

	if len(ret) == 0 {
		panic("no return value specified for ExportSimulatorDiagnostics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(deployDir, pth, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportTestRunResult provides a mock function with given fields: failed
func (_m *Exporter) ExportTestRunResult(failed bool) {
	_m.Called(failed)
}

// ExportXCResultBundle provides a mock function with given fields: deployDir, xcResultPath, scheme
func (_m *Exporter) ExportXCResultBundle(deployDir string, xcResultPath string, scheme string) {
	_m.Called(deployDir, xcResultPath, scheme)
}

// ExportXcodebuildBuildLog provides a mock function with given fields: deployDir, xcodebuildBuildLog
func (_m *Exporter) ExportXcodebuildBuildLog(deployDir string, xcodebuildBuildLog string) error {
	ret := _m.Called(deployDir, xcodebuildBuildLog)

	if len(ret) == 0 {
		panic("no return value specified for ExportXcodebuildBuildLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(deployDir, xcodebuildBuildLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportXcodebuildTestLog provides a mock function with given fields: deployDir, xcodebuildTestLog
func (_m *Exporter) ExportXcodebuildTestLog(deployDir string, xcodebuildTestLog string) error {
	ret := _m.Called(deployDir, xcodebuildTestLog)

	if len(ret) == 0 {
		panic("no return value specified for ExportXcodebuildTestLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(deployDir, xcodebuildTestLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExporter creates a new instance of Exporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Exporter {
	mock := &Exporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
